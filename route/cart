const express = require('express')
// jsonwebtoken docs: https://github.com/auth0/node-jsonwebtoken
const crypto = require('crypto')
// Passport docs: http://www.passportjs.org/docs/
const passport = require('passport')
// bcrypt docs: https://github.com/kelektiv/node.bcrypt.js
const bcrypt = require('bcrypt')

// see above for explanation of "salting", 10 rounds is recommended
const bcryptSaltRounds = 10

const handle = require('../../lib/error_handler')
const BadParamsError = require('../../lib/custom_errors').BadParamsError

const User = require('../models/user')
const Product = require('../models/product')
const Cart = require('../models/cart')

// passing this as a second argument to `router.<verb>` will make it
// so that a token MUST be passed for that route to be available
// it will also set `res.user`
const requireToken = passport.authenticate('bearer', { session: false })

// instantiate a router (mini app that only handles routes)
const router = express.Router()

// home
router.get('/', function (req, res, next) {
  res.render('index', {title: 'Express'})
})

// add to cart
router.get('/add-to-cart/:id', function (req, res, next) {
  const productId = req.params.id
  const cart = new Cart(req.order.cart ? req.order.cart : {})

  Product.findById(productId, function (err, product) {
    if (err) {
      return res.redirect('/')
    }
    cart.add(product, product.id)
    req.order.cart = cart
    console.log(req.order.cart)
    res.redirect('/')
  })
})

router.get('/reduce/:id', function (req, res, next) {
  const productId = req.params.id
  const cart = new Cart(req.order.cart ? req.order.cart : {})

  cart.reduceByOne(productId)
  req.order.cart = cart
  res.redirect('/shopping-cart')
})

router.get('/remove/:id', function (req, res, next) {
  const productId = req.params.id
  const cart = new Cart(req.order.cart ? req.order.cart : {})

  cart.removeItem(productId)
  req.order.cart = cart
  res.redirect('/shopping-cart')
})

router.get('/shopping-cart', function (req, res, next) {
  if (!req.order.cart) {
    return res.render('shop/shopping-cart', {products: null})
  }
  const cart = new Cart(req.order.cart)
  res.render('shop/shopping-cart', {products: cart.generateArray(), totalPrice: cart.totalPrice})
})

router.get('/', function (req, res, next) {
  Product.find(function (docs) {
    let productChunks = []
    let chunckSize = 3
    for (let i = 0; i < docs.length; i += chunckSize) {
      productChunks.push(docs.slice(i, i + chunckSize))
    }
    res.render('cart/index', {title: 'Cart', products: productChunks})
  })
})
router.get('/carts/:id', function (req, res, next) {
  const productId = req.params.id
})

module.exports = router
